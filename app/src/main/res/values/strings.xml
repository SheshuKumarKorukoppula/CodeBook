<resources>
    <string name="app_name">CodeBook</string>
    <string name="for_begginners">For Beginners</string>
    <string name="compilers">Compilers</string>
    <string name="concepts">Concepts</string>
    <string name="c_programming">C</string>
    <string name="cpp_programming">C++</string>
    <string name="python">Python</string>
    <string name="java">Java</string>
    <string name="select_the_type_of_programming_language">Select the type of Programming language</string>
    <string name="concepts1">Concepts</string>
    <string name="compilers1">Compilers</string>
    <string name="computer_systems_a_computer_is_an_electronic_device_which_performs_operations_such_as_accepts_data_as_an_input_store_the_data_manipulate_or_process_the_data_and_produce_the_results_an_output_main_task_performed_by_a_computer_accept_the_data_process_or_manipulate_the_data_display_or_store_the_result_in_the_form_of_human_understanding_store_the_data_instructions_and_results">Computer systems: A Computer is an electronic device which performs operations such as accepts data As an input, store the data, manipulate or process the data and produce the results an output. Main task performed by a computer • Accept the data • Process or manipulate the data • Display or store the result in the form of human understanding • Store the data, instructions and results.</string>
    <string name="computer_software_is_a_collection_of_computer_programs_and_related_data_that_provides_the_instructions_for_a_computer_what_to_do_and_how_to_do_it_software_refers_to_one_or_more_computer_programs_and_data_held_in_the_storage_of_the_computer_for_some_purpose">Computer software is a collection of computer programs and related data that provides the instructions for a computer what to do and how to do it. Software refers to one or more computer programs and data held in the storage of the computer for some purpose</string>
    <string name="basically_computer_software_is_of_three_main_types_system_software_system_software_is_responsible_for_managing_a_variety_of_independent_hardware_components_so_that_they_can_work_together_its_purpose_is_to_unburden_the_application_software_programmer_from_the_often_complex_details_of_the_particular_computer_being_used_including_such_accessories_as_communications_devices_printers_device_readers_displays_and_keyboards_and_also_to_partition_the_computer_s_resources_such_as_memory_and_processor_time_in_a_safe_and_stable_manner_device_drivers_operating_systems_servers_utilities_window_systems_programming_software_programming_software_usually_provides_tools_to_assist_a_programmer_in_writing_computer_programs_and_software_using_different_programming_languages_in_a_more_convenient_way_the_tools_include_compilers_debuggers_interpreters_linkers_text_editors_application_software_application_software_is_developed_to_aid_in_any_task_that_benefits_from_computation_it_is_a_broad_category_and_encompasses_software_of_many_kinds_including_the_internet_browser_being_used_to_display_this_page_this_category_includes_business_software_computer_aided_design_databases_decision_making_software_educational_software_image_editing_computing_environment_computing_environment_is_a_collection_of_computers_machines_software_and_networks_that_support_the_processing_and_exchange_of_electronic_information_meant_to_support_various_types_of_computing_solutions">Basically computer software is of three main types System Software: \nSystem software is responsible for managing a variety of independent hardware components, so that they can work together. Its purpose is to unburden the application software programmer from the often complex details of the particular computer being used, including such accessories as communications devices, printers, device readers, displays and keyboards, and also to partition the computer\'s resources such as memory and processor time in a safe and stable manner. \n• Device drivers \n• Operating systems \n• Servers \n• Utilities \n• Window systems Programming Software: Programming Software usually provides tools to assist a programmer in writing computer programs, and software using different programming languages in a more convenient way. The tools include: \n• Compilers \n• Debuggers \n• Interpreters \n• Linkers \n• Text editors Application Software:\nApplication software is developed to aid in any task that benefits from computation. It is a broad category, and encompasses Software of many kinds, including the internet browser being used to display this page. This category includes: • Business software • Computer aided design • Databases • Decision making software • Educational software • Image editing Computing Environment: Computing Environment is a collection of computers / machines, software, and networks that support the processing and exchange of electronic information meant to support various types of computing solutions.</string>
    <string name="c1">C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming. C++ is regarded as a middle-level language, as it comprises a combination of both high stx level and low-level language features. C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983. C++ is a superset of C, and that virtually any legal C program is a legal C++ program. Note: A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time.</string>
    <string name="c2">C++ fully supports object-oriented programming, including the four pillars of object-oriented development: \n Encapsulation \n Data hiding \n Inheritance \n Polymorphism</string>
    <string name="c3">Standard C++ consists of three important parts:  The core language giving all the building blocks including variables, data types and literals, etc. \n The C++ Standard Library giving a rich set of functions manipulating files, strings, etc. \n The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.</string>
    <string name="p1">Python is a widely used general-purpose, high level programming language. It was initially designed by Guido van Rossum in 1991 and developed by Python Software Foundation. It was mainly developed for emphasis on code readability, and its syntax allows programmers to express concepts in fewer lines of code. Python is a programming language that lets you work quickly and integrate systems more efficiently</string>
    <string name="p3">Beginning with Python programming: 1) Finding an Interpreter: Before we start Python programming, we need to have an interpreter to interpret and run our programs. There are certain online interpreters like https://ide.geeksforgeeks.org/, http://ideone.com/ or http://codepad.org/ that can be used to start Python without installing an interpreter. Windows: There are many interpreters available freely to run Python scripts like IDLE (Integrated Development Environment) which is installed when you install the python software from http://python.org/downloads</string>
    <string name="p2">2) Writing first program: # Script Begins \nStatement\nStatement2 \nStatement3 \n# Script Ends Differences between scripting language and programming language:</string>
    <string name="j1">Introduction \nEverywhere you look in the real world you see objects—people, animals, plants, cars, planes, buildings, computers and so on. Humans think in terms of objects. Telephones, houses, traffic lights, microwave ovens and water coolers are just a few more objects. Computer programs, such as the Java programs you’ll read in this book interacting software objects. We sometimes divide objects into two categories: animate and inanimate. Animate objects are ―alive‖ theyinmovesomearound andsensedothings. —Inanimate objects, on the other hand, do not move on their own .Objects of both types, however, have some things in common. They all have attributes (e.g., size, shape, color and weight), and they all exhibit behaviors (e.g., a ball rolls, bounces, inflates and deflates; a baby cries, sleep crawls, walks and blinks; a car accelerates, brakes and turns; a towel absorbs water). We will study the kinds of attributes and behaviors that software objects have. Humans learn about existing objects by studying their attributes and observing their behaviors. Different objects can have similar attributes and can exhibit similar behaviors. Comparisons can be made, for example, between babies and adults and between humans and chimpanzees. Object-oriented design provides a natural and intuitive way to view the software design process—namely, modeling objects by their attributes and behaviors just as we describe real stx orld objects. OOD also models communication between objects. Just as people send messages to one another (e.g., a sergeant commands a soldier to stand at attention), objects also communicate via messages. A bank account object may receive a message to decrease its balance by a certain amount because the customer has withdrawn that amount of money. Object-Oriented: Although influenced by its predecessors, Java was not designed to be source-code compatible with any other language. This allowed the Java team the freedom to design with a blank slate. One outcome of this was a clean, usable, pragmatic approach to objects. Borrowing liberally from many seminal object-software environments of the last few decades, Java manages to strike a balance between the purist’s ―everything is of my way‖ model. The object model in Java i such as integers, are kept as high-performance non objects.OOD encapsulates (i.e., wraps) attributes and operations (behaviors) into objects, an object’s attributes and operations are intim information hiding. This means that objects may know how to communicate with one another across well-defined interfaces, but normally they are not allowed to know how other objects are implemented ,implementation details are hidden within the objects themselves. Wecan drive a car effectively, for instance, without knowing the details of how engines, transmissions, brakes and exhaust systems work internally—as long as we know how to use the accelerator pedal, the brake pedal, the wheel and so on. Information hiding, as we will see, is crucial to good software engineering. Languages like Java are object oriented. Programming in such a language is called object-oriented programming (OOP), and it allows computer programmers to implement an object-oriented design as a working system. Languages like C, on the other hand, are procedural, so programming tends to be action oriented. In C, the unit of programming is the function. Groups of actions that perform some common task are formed into functions, and functions are grouped to form programs. In Java, the unit of programming is the class from which objects are eventually instantiated (created). Java classes contain methods (which implement operations and are similar to functions in C) as well as fields (which implement attributes). Java programmers concentrate on creating classes. Each class contains fields, and the set of methods that manipulate the fields and provide services to clients (i.e., other classes that use the class). The programmer uses existing classes as the building blocks for constructing new classes. Classes are to objects as blueprints are to houses. Just as we can build many houses from one blueprint, we can instantiate (create) many objects from one class. Classes can have relationships with other classes. For example, in an object-oriented design of a bank, the ―bank teller‖ class needs to relate ―safe‖ class, and so on. These relationships Packaging software as classes makes it possible for future software systems to reuse the classes. Groups of related classes are often packaged as reusable components. Just as realtors often say that the three most important factors affecti location,‖ people in the software community affecting the future of software development are ―reuse, classes when building new classes and programs saves time and effort.Reuse also helps programmers build more reliable and effective systems, because existing classes and components often have gone through extensive testing, debugging and performance tuning. Indeed, with object technology, you can build much of the software you will need by combining classes, just as automobile manufacturers combine interchangeable parts. Each new class you create will have the potential to become a valuable software asset that you and other programmers can use to speed and enhance the quality of future software development efforts.</string>
</resources>